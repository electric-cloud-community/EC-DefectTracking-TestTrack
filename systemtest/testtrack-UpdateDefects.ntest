# -*-Perl-*-
# testtrack.ntest -
#
# Exercise procedure UpdateDefects in EC-DefectTracking-TestTrack
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;
require "$::gTestFileDir/../../EC-DefectTracking/systemtest/ntest.common";
$::gProjectImported = 0;
$::gConfigCreated = 0;

sub importProject() {
    assertOK($::N->import({ file =>"$::gTestFileDir/testtrack-UpdateDefects.xml", path  => '/projects/testtrack-UpdateDefects', force => 1} ), 'import testtrack-UpdateDefects project');
    assertOK($::N->getProcedure('testtrack-UpdateDefects', 'cfgDoesNotExist'),'cfgDoesNotExist procedure exists');
    $::gProjectImported = 1;
}

sub createConfig() {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => 'CreateConfiguration',
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'desc', value => 'TestTrack configuration' }, 
            { actualParameterName => 'url', value => 'https://localhost' }, 
            { actualParameterName => 'credential', value => 'test' }, 
            { actualParameterName => 'project', value => 'Sample Project' }, 
            { actualParameterName => 'type', value => 'Cosmetic' }, 
            { actualParameterName => 'enteruser', value => 'Administrator, System' },
          ],
          credential => [ 
            { credentialName => 'test', userName => 'administrator', password => 'change,me', },
          ],
        });
    my $jobId = 0;
    my $status = '';
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        if ($status ne 'completed') {
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");
    $::gConfigCreated = 1;
}

sub doSetup() {
    if(! $::gProjectImported) {
        importProject();
    }
    if (! $::gConfigCreated) {
        createConfig();
    }
}

ntest 'cfgDoesNotExist', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'cfgDoesNotExist', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='TestTrack - Update Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/cfgDoesNotExist.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Could not find configuration cfgDoesNotExist', $data, 'cfgDoesNotExist 

output');
};

ntest 'propertyDoesNotExist', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects',  { procedureName => 'propertyDoesNotExist', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyDoesNotExist();
    writeFile("$::gCurrentTestDir/propertyDoesNotExist.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Error querying for /myJob/propertyDoesNotExist as a property', $data, 'propertyDoesNotExist output');
};

sub runfakepropertyDoesNotExist
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Error querying for /myJob/propertyDoesNotExist as a property";
    return $log;
} 

ntest 'propertyContainsInaccessibleDefectIDs', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'propertyContainsInaccessibleDefectIDs', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsInaccessibleDefectIDs();
    writeFile("$::gCurrentTestDir/propertyContainsInaccessibleDefectIDs.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('Error trying to get TestTrack issue=Bug9999999: Defects update completed with some Errors', $data, 'propertyContainsInaccessibleDefectIDs output');
};

sub runfakepropertyContainsInaccessibleDefectIDs
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9999999=RESOLVED
Current Pair: Bug9999999=RESOLVED
Current idDefect: Bug9999999
Current valueDefect: RESOLVED
Error: failed trying to udpate Bug9999999 to RESOLVED status, with error: BZ::Client::Exception=HASH(0x297c74c) 
Error trying to get TestTrack issue=Bug9999999: Defects update completed with some Errors
action updateDefects returned: 1";
    return $log;
} 

ntest 'propertyContainsOneDefectID', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'propertyContainsOneDefectID', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsOneDefectID();
    writeFile("$::gCurrentTestDir/propertyContainsOneDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Current idDefect: Bug9874', $data, 'propertyContainsOneDefectID output');
};

sub runfakepropertyContainsOneDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9874=RESOLVED
Current Pair: Bug9874=RESOLVED
Current idDefect: Bug9874
Current valueDefect: RESOLVED
Bug9874 was successfully updated to RESOLVED status
Creating link /commander/pages/EC-DefectTracking-TestTrack-1.0.0.0/reports?jobId=6313
action updateDefects returned:";
    return $log;
} 

ntest "urlReportCreatedOneDefectID", {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure("testtrack-UpdateDefects", { procedureName => "propertyContainsOneDefectID", pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakeurlReportCreatedOneDefectID();
    writeFile("$::gCurrentTestDir/urlReportCreatedOneDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Creating link', $data, 'urlReportCreatedOneDefectID output');
};

sub runfakeurlReportCreatedOneDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9874=RESOLVED
Current Pair: Bug9874=RESOLVED
Current idDefect: Bug9874
Current valueDefect: RESOLVED
Bug9874 was successfully updated to RESOLVED status
Creating link /commander/pages/EC-DefectTracking-TestTrack-1.0.0.0/reports?jobId=6314
action updateDefects returned: ";
    return $log;
} 

ntest 'propertyContainsTwoDefectID', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'propertyContainsTwoDefectID', pollInterval  => '1', timeout => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyContainsTwoDefectID();
    writeFile("$::gCurrentTestDir/propertyContainsTwoDefectID.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Current idDefect: Bug9874', $data, 'propertyContainsTwoDefectID output');
    assertSubstring('Current idDefect: Bug9875', $data, 'propertyContainsTwoDefectID output');
};

sub runfakepropertyContainsTwoDefectID
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9874=RESOLVED,Bug9875=NEW
Current Pair: Bug9874=RESOLVED
Current idDefect: Bug9874
Current valueDefect: RESOLVED
Bug9874 was successfully updated to RESOLVED status
Current Pair: Bug9875=NEW
Current idDefect: Bug9875
Current valueDefect: NEW
Error: failed trying to udpate Bug9875 to NEW status, with error: BZ::Client::Exception=HASH(0x296bf58) 
Creating link /commander/pages/EC-DefectTracking-TestTrack-1.0.0.0/reports?jobId=6315
Defects update completed with some Errors
action updateDefects returned: 1";
    return $log;
} 

ntest 'closeDefectIssue', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'closeDefectIssue', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakecloseDefectIssue();
    writeFile("$::gCurrentTestDir/closeDefectIssue.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Bug9875 was successfully updated to RESOLVED status', $data, 'closeDefectIssue output');
};

sub runfakecloseDefectIssue
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9875=REOPENED,Bug9875=RESOLVED
Current Pair: Bug9875=REOPENED
Current idDefect: Bug9875
Current valueDefect: REOPENED
Bug9875 was successfully updated to REOPENED status
Current Pair: Bug9875=RESOLVED
Current idDefect: Bug9875
Current valueDefect: RESOLVED
Bug9875 was successfully updated to RESOLVED status
Creating link /commander/pages/EC-DefectTracking-TestTrack-1.0.0.0/reports?jobId=6317
action updateDefects returned: ";
    return $log;
} 

ntest 'propertyFormatError', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('testtrack-UpdateDefects', { procedureName => 'propertyFormatError', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $data = runfakepropertyFormatError();
    writeFile("$::gCurrentTestDir/propertyFormatError.log","====Job 

Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Error: Property format error', $data, 'propertyFormatError output');
};

sub runfakepropertyFormatError
{
    my $log= "Getting ECDefectTracking bootstrap code from /myProject/procedure_helpers/bootstrap
Running boostrap for testtrackCfgTestServer ...
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Cfg..
Loading /plugins/EC-DefectTracking-1.1.1.0/project/defectTracking_driver/ECDefectTracking::Base::Driver..
Property : Bug9874
Current Pair: Bug9874
Current idDefect: Bug9874
Current valueDefect: 
Error: Property format error
action updateDefects returned:";
    return $log;
} 
